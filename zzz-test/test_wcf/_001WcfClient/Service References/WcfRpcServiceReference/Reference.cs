//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _001WcfClient.WcfRpcServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfRpcServiceReference.IRpc", SessionMode=System.ServiceModel.SessionMode.NotAllowed)]
    public interface IRpc {
        
        // CODEGEN: Generating message contract since the operation Invoke is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRpc/Invoke", ReplyAction="http://tempuri.org/IRpc/InvokeResponse")]
        _001WcfClient.WcfRpcServiceReference.RpcData Invoke(_001WcfClient.WcfRpcServiceReference.RpcData request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRpc/Invoke", ReplyAction="http://tempuri.org/IRpc/InvokeResponse")]
        System.Threading.Tasks.Task<_001WcfClient.WcfRpcServiceReference.RpcData> InvokeAsync(_001WcfClient.WcfRpcServiceReference.RpcData request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class RpcData {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string Data1;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string Data2;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long DataLen;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long DataOffset;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long EnumId;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Flags;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream StreamData;
        
        public RpcData() {
        }
        
        public RpcData(string Data1, string Data2, long DataLen, long DataOffset, long EnumId, long Flags, System.IO.Stream StreamData) {
            this.Data1 = Data1;
            this.Data2 = Data2;
            this.DataLen = DataLen;
            this.DataOffset = DataOffset;
            this.EnumId = EnumId;
            this.Flags = Flags;
            this.StreamData = StreamData;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRpcChannel : _001WcfClient.WcfRpcServiceReference.IRpc, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RpcClient : System.ServiceModel.ClientBase<_001WcfClient.WcfRpcServiceReference.IRpc>, _001WcfClient.WcfRpcServiceReference.IRpc {
        
        public RpcClient() {
        }
        
        public RpcClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RpcClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RpcClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RpcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        _001WcfClient.WcfRpcServiceReference.RpcData _001WcfClient.WcfRpcServiceReference.IRpc.Invoke(_001WcfClient.WcfRpcServiceReference.RpcData request) {
            return base.Channel.Invoke(request);
        }
        
        public void Invoke(ref string Data1, ref string Data2, ref long DataLen, ref long DataOffset, ref long EnumId, ref long Flags, ref System.IO.Stream StreamData) {
            _001WcfClient.WcfRpcServiceReference.RpcData inValue = new _001WcfClient.WcfRpcServiceReference.RpcData();
            inValue.Data1 = Data1;
            inValue.Data2 = Data2;
            inValue.DataLen = DataLen;
            inValue.DataOffset = DataOffset;
            inValue.EnumId = EnumId;
            inValue.Flags = Flags;
            inValue.StreamData = StreamData;
            _001WcfClient.WcfRpcServiceReference.RpcData retVal = ((_001WcfClient.WcfRpcServiceReference.IRpc)(this)).Invoke(inValue);
            Data1 = retVal.Data1;
            Data2 = retVal.Data2;
            DataLen = retVal.DataLen;
            DataOffset = retVal.DataOffset;
            EnumId = retVal.EnumId;
            Flags = retVal.Flags;
            StreamData = retVal.StreamData;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<_001WcfClient.WcfRpcServiceReference.RpcData> _001WcfClient.WcfRpcServiceReference.IRpc.InvokeAsync(_001WcfClient.WcfRpcServiceReference.RpcData request) {
            return base.Channel.InvokeAsync(request);
        }
        
        public System.Threading.Tasks.Task<_001WcfClient.WcfRpcServiceReference.RpcData> InvokeAsync(string Data1, string Data2, long DataLen, long DataOffset, long EnumId, long Flags, System.IO.Stream StreamData) {
            _001WcfClient.WcfRpcServiceReference.RpcData inValue = new _001WcfClient.WcfRpcServiceReference.RpcData();
            inValue.Data1 = Data1;
            inValue.Data2 = Data2;
            inValue.DataLen = DataLen;
            inValue.DataOffset = DataOffset;
            inValue.EnumId = EnumId;
            inValue.Flags = Flags;
            inValue.StreamData = StreamData;
            return ((_001WcfClient.WcfRpcServiceReference.IRpc)(this)).InvokeAsync(inValue);
        }
    }
}
